// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: voting.proto

package votingpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreatePollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId           string    `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	CreatorId          string    `protobuf:"bytes,2,opt,name=creatorId,proto3" json:"creatorId,omitempty"`
	Title              string    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	AllowedUniqueVotes int32     `protobuf:"varint,4,opt,name=allowedUniqueVotes,proto3" json:"allowedUniqueVotes,omitempty"`
	Options            []*Option `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	Expires            int64     `protobuf:"varint,6,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *CreatePollRequest) Reset() {
	*x = CreatePollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollRequest) ProtoMessage() {}

func (x *CreatePollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollRequest.ProtoReflect.Descriptor instead.
func (*CreatePollRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePollRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *CreatePollRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *CreatePollRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePollRequest) GetAllowedUniqueVotes() int32 {
	if x != nil {
		return x.AllowedUniqueVotes
	}
	return 0
}

func (x *CreatePollRequest) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreatePollRequest) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

type CreatePollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll *Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
}

func (x *CreatePollReply) Reset() {
	*x = CreatePollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollReply) ProtoMessage() {}

func (x *CreatePollReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollReply.ProtoReflect.Descriptor instead.
func (*CreatePollReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePollReply) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Url     string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{2}
}

func (x *Option) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Option) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Option) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId  string `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	VoterId  string `protobuf:"bytes,3,opt,name=voterId,proto3" json:"voterId,omitempty"`
}

func (x *PollRequest) Reset() {
	*x = PollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollRequest) ProtoMessage() {}

func (x *PollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollRequest.ProtoReflect.Descriptor instead.
func (*PollRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{3}
}

func (x *PollRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *PollRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PollRequest) GetVoterId() string {
	if x != nil {
		return x.VoterId
	}
	return ""
}

type VoterPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoterId  string `protobuf:"bytes,1,opt,name=voterId,proto3" json:"voterId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *VoterPollRequest) Reset() {
	*x = VoterPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoterPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoterPollRequest) ProtoMessage() {}

func (x *VoterPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoterPollRequest.ProtoReflect.Descriptor instead.
func (*VoterPollRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{4}
}

func (x *VoterPollRequest) GetVoterId() string {
	if x != nil {
		return x.VoterId
	}
	return ""
}

func (x *VoterPollRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type PollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll *Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
}

func (x *PollReply) Reset() {
	*x = PollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollReply) ProtoMessage() {}

func (x *PollReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollReply.ProtoReflect.Descriptor instead.
func (*PollReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{5}
}

func (x *PollReply) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortId            string    `protobuf:"bytes,2,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId           string    `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	CreatorId          string    `protobuf:"bytes,4,opt,name=creatorId,proto3" json:"creatorId,omitempty"`
	Title              string    `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	AllowedUniqueVotes int32     `protobuf:"varint,6,opt,name=allowedUniqueVotes,proto3" json:"allowedUniqueVotes,omitempty"`
	HasEnded           bool      `protobuf:"varint,7,opt,name=hasEnded,proto3" json:"hasEnded,omitempty"`
	Options            []*Option `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty"`
	Expires            int64     `protobuf:"varint,9,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{6}
}

func (x *Poll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Poll) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *Poll) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *Poll) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Poll) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Poll) GetAllowedUniqueVotes() int32 {
	if x != nil {
		return x.AllowedUniqueVotes
	}
	return 0
}

func (x *Poll) GetHasEnded() bool {
	if x != nil {
		return x.HasEnded
	}
	return false
}

func (x *Poll) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Poll) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

type EndPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId     string `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId    string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	RequesterId string `protobuf:"bytes,3,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
}

func (x *EndPollRequest) Reset() {
	*x = EndPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndPollRequest) ProtoMessage() {}

func (x *EndPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndPollRequest.ProtoReflect.Descriptor instead.
func (*EndPollRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{7}
}

func (x *EndPollRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *EndPollRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *EndPollRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

type EndPollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll *Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
}

func (x *EndPollReply) Reset() {
	*x = EndPollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndPollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndPollReply) ProtoMessage() {}

func (x *EndPollReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndPollReply.ProtoReflect.Descriptor instead.
func (*EndPollReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{8}
}

func (x *EndPollReply) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

type OpenPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId     string `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId    string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	RequesterId string `protobuf:"bytes,3,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
	Expires     int64  `protobuf:"varint,4,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *OpenPollRequest) Reset() {
	*x = OpenPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPollRequest) ProtoMessage() {}

func (x *OpenPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPollRequest.ProtoReflect.Descriptor instead.
func (*OpenPollRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{9}
}

func (x *OpenPollRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *OpenPollRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *OpenPollRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *OpenPollRequest) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

type OpenPollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll               *Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
	PreviouslyEnded    bool  `protobuf:"varint,2,opt,name=previouslyEnded,proto3" json:"previouslyEnded,omitempty"`
	PreviousExpiration int64 `protobuf:"varint,3,opt,name=previousExpiration,proto3" json:"previousExpiration,omitempty"`
}

func (x *OpenPollReply) Reset() {
	*x = OpenPollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPollReply) ProtoMessage() {}

func (x *OpenPollReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPollReply.ProtoReflect.Descriptor instead.
func (*OpenPollReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{10}
}

func (x *OpenPollReply) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *OpenPollReply) GetPreviouslyEnded() bool {
	if x != nil {
		return x.PreviouslyEnded
	}
	return false
}

func (x *OpenPollReply) GetPreviousExpiration() int64 {
	if x != nil {
		return x.PreviousExpiration
	}
	return 0
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId  string `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{11}
}

func (x *StatusRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *StatusRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type Voter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Voter) Reset() {
	*x = Voter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voter) ProtoMessage() {}

func (x *Voter) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voter.ProtoReflect.Descriptor instead.
func (*Voter) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{12}
}

func (x *Voter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Voter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type StatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll       *Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
	VoterCount int64 `protobuf:"varint,2,opt,name=voterCount,proto3" json:"voterCount,omitempty"`
}

func (x *StatusReply) Reset() {
	*x = StatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReply) ProtoMessage() {}

func (x *StatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReply.ProtoReflect.Descriptor instead.
func (*StatusReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{13}
}

func (x *StatusReply) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *StatusReply) GetVoterCount() int64 {
	if x != nil {
		return x.VoterCount
	}
	return 0
}

type VotersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId  string `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *VotersRequest) Reset() {
	*x = VotersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotersRequest) ProtoMessage() {}

func (x *VotersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotersRequest.ProtoReflect.Descriptor instead.
func (*VotersRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{14}
}

func (x *VotersRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *VotersRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type BallotOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     int32  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	OptionId string `protobuf:"bytes,2,opt,name=optionId,proto3" json:"optionId,omitempty"`
}

func (x *BallotOption) Reset() {
	*x = BallotOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallotOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotOption) ProtoMessage() {}

func (x *BallotOption) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotOption.ProtoReflect.Descriptor instead.
func (*BallotOption) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{15}
}

func (x *BallotOption) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *BallotOption) GetOptionId() string {
	if x != nil {
		return x.OptionId
	}
	return ""
}

type VoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId  string          `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId string          `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Voter    *Voter          `protobuf:"bytes,3,opt,name=voter,proto3" json:"voter,omitempty"`
	Options  []*BallotOption `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{16}
}

func (x *VoteRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *VoteRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *VoteRequest) GetVoter() *Voter {
	if x != nil {
		return x.Voter
	}
	return nil
}

func (x *VoteRequest) GetOptions() []*BallotOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type VoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Options []*VoteReplyOption `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *VoteReply) Reset() {
	*x = VoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteReply) ProtoMessage() {}

func (x *VoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteReply.ProtoReflect.Descriptor instead.
func (*VoteReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{17}
}

func (x *VoteReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VoteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VoteReply) GetOptions() []*VoteReplyOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type VoteReplyOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   int32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Option *Option `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *VoteReplyOption) Reset() {
	*x = VoteReplyOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteReplyOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteReplyOption) ProtoMessage() {}

func (x *VoteReplyOption) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteReplyOption.ProtoReflect.Descriptor instead.
func (*VoteReplyOption) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{18}
}

func (x *VoteReplyOption) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *VoteReplyOption) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type CountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId    string   `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId   string   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	NumToElect int32    `protobuf:"varint,3,opt,name=numToElect,proto3" json:"numToElect,omitempty"`
	Method     string   `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	ToExclude  []string `protobuf:"bytes,5,rep,name=toExclude,proto3" json:"toExclude,omitempty"`
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{19}
}

func (x *CountRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *CountRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *CountRequest) GetNumToElect() int32 {
	if x != nil {
		return x.NumToElect
	}
	return 0
}

func (x *CountRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CountRequest) GetToExclude() []string {
	if x != nil {
		return x.ToExclude
	}
	return nil
}

type ExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId    string   `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId   string   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	NumToElect int32    `protobuf:"varint,3,opt,name=numToElect,proto3" json:"numToElect,omitempty"`
	Method     string   `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	ToExclude  []string `protobuf:"bytes,5,rep,name=toExclude,proto3" json:"toExclude,omitempty"`
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{20}
}

func (x *ExportRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *ExportRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ExportRequest) GetNumToElect() int32 {
	if x != nil {
		return x.NumToElect
	}
	return 0
}

func (x *ExportRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ExportRequest) GetToExclude() []string {
	if x != nil {
		return x.ToExclude
	}
	return nil
}

type ExportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ExportReply) Reset() {
	*x = ExportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportReply) ProtoMessage() {}

func (x *ExportReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportReply.ProtoReflect.Descriptor instead.
func (*ExportReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{21}
}

func (x *ExportReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Poll      *Poll              `protobuf:"bytes,3,opt,name=poll,proto3" json:"poll,omitempty"`
	Method    string             `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Elected   []*VoteReplyOption `protobuf:"bytes,5,rep,name=elected,proto3" json:"elected,omitempty"`
	Events    []*CountEvent      `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	Summaries []*CountEvent      `protobuf:"bytes,7,rep,name=summaries,proto3" json:"summaries,omitempty"`
}

func (x *CountReply) Reset() {
	*x = CountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountReply) ProtoMessage() {}

func (x *CountReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountReply.ProtoReflect.Descriptor instead.
func (*CountReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{22}
}

func (x *CountReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CountReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CountReply) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *CountReply) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CountReply) GetElected() []*VoteReplyOption {
	if x != nil {
		return x.Elected
	}
	return nil
}

func (x *CountReply) GetEvents() []*CountEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CountReply) GetSummaries() []*CountEvent {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type CountEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CountEvent) Reset() {
	*x = CountEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountEvent) ProtoMessage() {}

func (x *CountEvent) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountEvent.ProtoReflect.Descriptor instead.
func (*CountEvent) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{23}
}

func (x *CountEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BltRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId    string   `protobuf:"bytes,1,opt,name=shortId,proto3" json:"shortId,omitempty"`
	ServerId   string   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	NumToElect int32    `protobuf:"varint,3,opt,name=numToElect,proto3" json:"numToElect,omitempty"`
	ToExclude  []string `protobuf:"bytes,4,rep,name=toExclude,proto3" json:"toExclude,omitempty"`
}

func (x *BltRequest) Reset() {
	*x = BltRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BltRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BltRequest) ProtoMessage() {}

func (x *BltRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BltRequest.ProtoReflect.Descriptor instead.
func (*BltRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{24}
}

func (x *BltRequest) GetShortId() string {
	if x != nil {
		return x.ShortId
	}
	return ""
}

func (x *BltRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *BltRequest) GetNumToElect() int32 {
	if x != nil {
		return x.NumToElect
	}
	return 0
}

func (x *BltRequest) GetToExclude() []string {
	if x != nil {
		return x.ToExclude
	}
	return nil
}

type BltReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BltReply) Reset() {
	*x = BltReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BltReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BltReply) ProtoMessage() {}

func (x *BltReply) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BltReply.ProtoReflect.Descriptor instead.
func (*BltReply) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{25}
}

func (x *BltReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_voting_proto protoreflect.FileDescriptor

var file_voting_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x22, 0x44, 0x0a, 0x06, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x5d, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x48, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x22, 0x92, 0x02, 0x0a, 0x04,
	0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x22, 0x68, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0c, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x22, 0x83,
	0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x05, 0x56,
	0x6f, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x51, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70,
	0x6f, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x42, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x09, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x4f, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x6f,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x54, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x9b, 0x01,
	0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x6f,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x42,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x1e, 0x0a,
	0x08, 0x42, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xe6, 0x04,
	0x0a, 0x06, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x1b, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x6c,
	0x6c, 0x12, 0x18, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x6c,
	0x6c, 0x12, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_voting_proto_rawDescOnce sync.Once
	file_voting_proto_rawDescData = file_voting_proto_rawDesc
)

func file_voting_proto_rawDescGZIP() []byte {
	file_voting_proto_rawDescOnce.Do(func() {
		file_voting_proto_rawDescData = protoimpl.X.CompressGZIP(file_voting_proto_rawDescData)
	})
	return file_voting_proto_rawDescData
}

var file_voting_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_voting_proto_goTypes = []interface{}{
	(*CreatePollRequest)(nil), // 0: votingpb.CreatePollRequest
	(*CreatePollReply)(nil),   // 1: votingpb.CreatePollReply
	(*Option)(nil),            // 2: votingpb.Option
	(*PollRequest)(nil),       // 3: votingpb.PollRequest
	(*VoterPollRequest)(nil),  // 4: votingpb.VoterPollRequest
	(*PollReply)(nil),         // 5: votingpb.PollReply
	(*Poll)(nil),              // 6: votingpb.Poll
	(*EndPollRequest)(nil),    // 7: votingpb.EndPollRequest
	(*EndPollReply)(nil),      // 8: votingpb.EndPollReply
	(*OpenPollRequest)(nil),   // 9: votingpb.OpenPollRequest
	(*OpenPollReply)(nil),     // 10: votingpb.OpenPollReply
	(*StatusRequest)(nil),     // 11: votingpb.StatusRequest
	(*Voter)(nil),             // 12: votingpb.Voter
	(*StatusReply)(nil),       // 13: votingpb.StatusReply
	(*VotersRequest)(nil),     // 14: votingpb.VotersRequest
	(*BallotOption)(nil),      // 15: votingpb.BallotOption
	(*VoteRequest)(nil),       // 16: votingpb.VoteRequest
	(*VoteReply)(nil),         // 17: votingpb.VoteReply
	(*VoteReplyOption)(nil),   // 18: votingpb.VoteReplyOption
	(*CountRequest)(nil),      // 19: votingpb.CountRequest
	(*ExportRequest)(nil),     // 20: votingpb.ExportRequest
	(*ExportReply)(nil),       // 21: votingpb.ExportReply
	(*CountReply)(nil),        // 22: votingpb.CountReply
	(*CountEvent)(nil),        // 23: votingpb.CountEvent
	(*BltRequest)(nil),        // 24: votingpb.BltRequest
	(*BltReply)(nil),          // 25: votingpb.BltReply
}
var file_voting_proto_depIdxs = []int32{
	2,  // 0: votingpb.CreatePollRequest.options:type_name -> votingpb.Option
	6,  // 1: votingpb.CreatePollReply.poll:type_name -> votingpb.Poll
	6,  // 2: votingpb.PollReply.poll:type_name -> votingpb.Poll
	2,  // 3: votingpb.Poll.options:type_name -> votingpb.Option
	6,  // 4: votingpb.EndPollReply.poll:type_name -> votingpb.Poll
	6,  // 5: votingpb.OpenPollReply.poll:type_name -> votingpb.Poll
	6,  // 6: votingpb.StatusReply.poll:type_name -> votingpb.Poll
	12, // 7: votingpb.VoteRequest.voter:type_name -> votingpb.Voter
	15, // 8: votingpb.VoteRequest.options:type_name -> votingpb.BallotOption
	18, // 9: votingpb.VoteReply.options:type_name -> votingpb.VoteReplyOption
	2,  // 10: votingpb.VoteReplyOption.option:type_name -> votingpb.Option
	6,  // 11: votingpb.CountReply.poll:type_name -> votingpb.Poll
	18, // 12: votingpb.CountReply.elected:type_name -> votingpb.VoteReplyOption
	23, // 13: votingpb.CountReply.events:type_name -> votingpb.CountEvent
	23, // 14: votingpb.CountReply.summaries:type_name -> votingpb.CountEvent
	0,  // 15: votingpb.Voting.CreatePoll:input_type -> votingpb.CreatePollRequest
	3,  // 16: votingpb.Voting.Poll:input_type -> votingpb.PollRequest
	4,  // 17: votingpb.Voting.VoterPoll:input_type -> votingpb.VoterPollRequest
	7,  // 18: votingpb.Voting.EndPoll:input_type -> votingpb.EndPollRequest
	9,  // 19: votingpb.Voting.OpenPoll:input_type -> votingpb.OpenPollRequest
	11, // 20: votingpb.Voting.Status:input_type -> votingpb.StatusRequest
	14, // 21: votingpb.Voting.Voters:input_type -> votingpb.VotersRequest
	16, // 22: votingpb.Voting.Vote:input_type -> votingpb.VoteRequest
	19, // 23: votingpb.Voting.Count:input_type -> votingpb.CountRequest
	20, // 24: votingpb.Voting.Export:input_type -> votingpb.ExportRequest
	1,  // 25: votingpb.Voting.CreatePoll:output_type -> votingpb.CreatePollReply
	5,  // 26: votingpb.Voting.Poll:output_type -> votingpb.PollReply
	5,  // 27: votingpb.Voting.VoterPoll:output_type -> votingpb.PollReply
	8,  // 28: votingpb.Voting.EndPoll:output_type -> votingpb.EndPollReply
	10, // 29: votingpb.Voting.OpenPoll:output_type -> votingpb.OpenPollReply
	13, // 30: votingpb.Voting.Status:output_type -> votingpb.StatusReply
	12, // 31: votingpb.Voting.Voters:output_type -> votingpb.Voter
	17, // 32: votingpb.Voting.Vote:output_type -> votingpb.VoteReply
	22, // 33: votingpb.Voting.Count:output_type -> votingpb.CountReply
	21, // 34: votingpb.Voting.Export:output_type -> votingpb.ExportReply
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_voting_proto_init() }
func file_voting_proto_init() {
	if File_voting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_voting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoterPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndPollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallotOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteReplyOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BltRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BltReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_voting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_voting_proto_goTypes,
		DependencyIndexes: file_voting_proto_depIdxs,
		MessageInfos:      file_voting_proto_msgTypes,
	}.Build()
	File_voting_proto = out.File
	file_voting_proto_rawDesc = nil
	file_voting_proto_goTypes = nil
	file_voting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VotingClient is the client API for Voting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VotingClient interface {
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollReply, error)
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollReply, error)
	VoterPoll(ctx context.Context, in *VoterPollRequest, opts ...grpc.CallOption) (*PollReply, error)
	EndPoll(ctx context.Context, in *EndPollRequest, opts ...grpc.CallOption) (*EndPollReply, error)
	OpenPoll(ctx context.Context, in *OpenPollRequest, opts ...grpc.CallOption) (*OpenPollReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	Voters(ctx context.Context, in *VotersRequest, opts ...grpc.CallOption) (Voting_VotersClient, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportReply, error)
}

type votingClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingClient(cc grpc.ClientConnInterface) VotingClient {
	return &votingClient{cc}
}

func (c *votingClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollReply, error) {
	out := new(CreatePollReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/CreatePoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollReply, error) {
	out := new(PollReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) VoterPoll(ctx context.Context, in *VoterPollRequest, opts ...grpc.CallOption) (*PollReply, error) {
	out := new(PollReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/VoterPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) EndPoll(ctx context.Context, in *EndPollRequest, opts ...grpc.CallOption) (*EndPollReply, error) {
	out := new(EndPollReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/EndPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) OpenPoll(ctx context.Context, in *OpenPollRequest, opts ...grpc.CallOption) (*OpenPollReply, error) {
	out := new(OpenPollReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/OpenPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Voters(ctx context.Context, in *VotersRequest, opts ...grpc.CallOption) (Voting_VotersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Voting_serviceDesc.Streams[0], "/votingpb.Voting/Voters", opts...)
	if err != nil {
		return nil, err
	}
	x := &votingVotersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Voting_VotersClient interface {
	Recv() (*Voter, error)
	grpc.ClientStream
}

type votingVotersClient struct {
	grpc.ClientStream
}

func (x *votingVotersClient) Recv() (*Voter, error) {
	m := new(Voter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *votingClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error) {
	out := new(CountReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportReply, error) {
	out := new(ExportReply)
	err := c.cc.Invoke(ctx, "/votingpb.Voting/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServer is the server API for Voting service.
type VotingServer interface {
	CreatePoll(context.Context, *CreatePollRequest) (*CreatePollReply, error)
	Poll(context.Context, *PollRequest) (*PollReply, error)
	VoterPoll(context.Context, *VoterPollRequest) (*PollReply, error)
	EndPoll(context.Context, *EndPollRequest) (*EndPollReply, error)
	OpenPoll(context.Context, *OpenPollRequest) (*OpenPollReply, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	Voters(*VotersRequest, Voting_VotersServer) error
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
	Count(context.Context, *CountRequest) (*CountReply, error)
	Export(context.Context, *ExportRequest) (*ExportReply, error)
}

// UnimplementedVotingServer can be embedded to have forward compatible implementations.
type UnimplementedVotingServer struct {
}

func (*UnimplementedVotingServer) CreatePoll(context.Context, *CreatePollRequest) (*CreatePollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (*UnimplementedVotingServer) Poll(context.Context, *PollRequest) (*PollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedVotingServer) VoterPoll(context.Context, *VoterPollRequest) (*PollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoterPoll not implemented")
}
func (*UnimplementedVotingServer) EndPoll(context.Context, *EndPollRequest) (*EndPollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPoll not implemented")
}
func (*UnimplementedVotingServer) OpenPoll(context.Context, *OpenPollRequest) (*OpenPollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPoll not implemented")
}
func (*UnimplementedVotingServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedVotingServer) Voters(*VotersRequest, Voting_VotersServer) error {
	return status.Errorf(codes.Unimplemented, "method Voters not implemented")
}
func (*UnimplementedVotingServer) Vote(context.Context, *VoteRequest) (*VoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedVotingServer) Count(context.Context, *CountRequest) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedVotingServer) Export(context.Context, *ExportRequest) (*ExportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterVotingServer(s *grpc.Server, srv VotingServer) {
	s.RegisterService(&_Voting_serviceDesc, srv)
}

func _Voting_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/CreatePoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_VoterPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoterPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).VoterPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/VoterPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).VoterPoll(ctx, req.(*VoterPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_EndPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).EndPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/EndPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).EndPoll(ctx, req.(*EndPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_OpenPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).OpenPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/OpenPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).OpenPoll(ctx, req.(*OpenPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Voters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VotersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VotingServer).Voters(m, &votingVotersServer{stream})
}

type Voting_VotersServer interface {
	Send(*Voter) error
	grpc.ServerStream
}

type votingVotersServer struct {
	grpc.ServerStream
}

func (x *votingVotersServer) Send(m *Voter) error {
	return x.ServerStream.SendMsg(m)
}

func _Voting_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votingpb.Voting/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Voting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votingpb.Voting",
	HandlerType: (*VotingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoll",
			Handler:    _Voting_CreatePoll_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Voting_Poll_Handler,
		},
		{
			MethodName: "VoterPoll",
			Handler:    _Voting_VoterPoll_Handler,
		},
		{
			MethodName: "EndPoll",
			Handler:    _Voting_EndPoll_Handler,
		},
		{
			MethodName: "OpenPoll",
			Handler:    _Voting_OpenPoll_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Voting_Status_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Voting_Vote_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Voting_Count_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _Voting_Export_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Voters",
			Handler:       _Voting_Voters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "voting.proto",
}
