syntax = "proto3";

option go_package = ".;votingpb";
package votingpb;

service Voting {
    rpc CreatePoll(CreatePollRequest) returns (CreatePollReply) {}
    rpc Poll(PollRequest) returns (PollReply) {}
    rpc VoterPoll(VoterPollRequest) returns (PollReply) {}
    rpc EndPoll(EndPollRequest) returns (EndPollReply) {}
    rpc Status(StatusRequest) returns (StatusReply) {}
    rpc Voters(VotersRequest) returns (stream Voter) {}
    rpc Vote(VoteRequest) returns (VoteReply) {}
    rpc Count(CountRequest) returns (CountReply) {}
}

message CreatePollRequest {
    string serverId = 1;
    string creatorId = 2;
    string title = 3;
    int32 allowedUniqueVotes = 4;
    repeated Option options = 5;
    int64 expires = 6;
}

message CreatePollReply {
    Poll poll = 1;
}

message Option {
    string id = 1;
    string content = 2;
    string url = 3;
}

message PollRequest {
    string shortId = 1;
    string serverId = 2;
    string voterId = 3;
}

message VoterPollRequest {
    string voterId = 1;
    string serverId = 2;
}

message PollReply {
    Poll poll = 1;
}

message Poll {
    string id = 1;
    string shortId = 2;
    string serverId = 3;
    string creatorId = 4;
    string title = 5;
    int32 allowedUniqueVotes = 6;
    bool hasEnded = 7;
    repeated Option options = 8;
    int64 expires = 9;
}

message EndPollRequest {
    string shortId = 1;
    string serverId = 2;
    string requesterId = 3;
}

message EndPollReply {
    Poll poll = 1;
}

message StatusRequest {
    string shortId = 1;
    string serverId = 2;
}

message Voter {
    string id = 1;
    string username = 2;
}

message StatusReply {
    Poll poll = 1;
    int64 voterCount = 2;
}

message VotersRequest {
    string shortId = 1;
    string serverId = 2;
}

message BallotOption {
    int32 rank = 1;
    string optionId = 2;
}

message VoteRequest {
    string shortId = 1;
    string serverId = 2;
    Voter voter = 3;
    repeated BallotOption options = 4;
}

message VoteReply {
    bool success = 1;
    string message = 2;
    repeated VoteReplyOption options = 3;
}

message VoteReplyOption {
    int32 rank = 1;
    Option option = 2;
}

message CountRequest {
    string shortId = 1;
    string serverId = 2;
    int32 numToElect = 3;
    string method = 4;
    repeated string toExclude = 5;
}

message CountReply {
    bool success = 1;
    string message = 2;
    Poll poll = 3;
    string method = 4;
    repeated VoteReplyOption elected = 5;
    repeated CountEvent events = 6;
    repeated CountEvent summaries = 7;
}

message CountEvent {
    string description = 1;
}
