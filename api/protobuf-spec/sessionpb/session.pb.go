// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session.proto

package sessionpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CurrentPollRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentPollRequest) Reset()         { *m = CurrentPollRequest{} }
func (m *CurrentPollRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentPollRequest) ProtoMessage()    {}
func (*CurrentPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{0}
}
func (m *CurrentPollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentPollRequest.Unmarshal(m, b)
}
func (m *CurrentPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentPollRequest.Marshal(b, m, deterministic)
}
func (dst *CurrentPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPollRequest.Merge(dst, src)
}
func (m *CurrentPollRequest) XXX_Size() int {
	return xxx_messageInfo_CurrentPollRequest.Size(m)
}
func (m *CurrentPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPollRequest proto.InternalMessageInfo

func (m *CurrentPollRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

type CurrentPollReply struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	PollId               string   `protobuf:"bytes,2,opt,name=pollId,proto3" json:"pollId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentPollReply) Reset()         { *m = CurrentPollReply{} }
func (m *CurrentPollReply) String() string { return proto.CompactTextString(m) }
func (*CurrentPollReply) ProtoMessage()    {}
func (*CurrentPollReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{1}
}
func (m *CurrentPollReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentPollReply.Unmarshal(m, b)
}
func (m *CurrentPollReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentPollReply.Marshal(b, m, deterministic)
}
func (dst *CurrentPollReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPollReply.Merge(dst, src)
}
func (m *CurrentPollReply) XXX_Size() int {
	return xxx_messageInfo_CurrentPollReply.Size(m)
}
func (m *CurrentPollReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPollReply.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPollReply proto.InternalMessageInfo

func (m *CurrentPollReply) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *CurrentPollReply) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

type SetCurrentPollRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	PollId               string   `protobuf:"bytes,2,opt,name=pollId,proto3" json:"pollId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetCurrentPollRequest) Reset()         { *m = SetCurrentPollRequest{} }
func (m *SetCurrentPollRequest) String() string { return proto.CompactTextString(m) }
func (*SetCurrentPollRequest) ProtoMessage()    {}
func (*SetCurrentPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{2}
}
func (m *SetCurrentPollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetCurrentPollRequest.Unmarshal(m, b)
}
func (m *SetCurrentPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetCurrentPollRequest.Marshal(b, m, deterministic)
}
func (dst *SetCurrentPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCurrentPollRequest.Merge(dst, src)
}
func (m *SetCurrentPollRequest) XXX_Size() int {
	return xxx_messageInfo_SetCurrentPollRequest.Size(m)
}
func (m *SetCurrentPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCurrentPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetCurrentPollRequest proto.InternalMessageInfo

func (m *SetCurrentPollRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *SetCurrentPollRequest) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

type SetCurrentPollReply struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	PollId               string   `protobuf:"bytes,2,opt,name=pollId,proto3" json:"pollId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetCurrentPollReply) Reset()         { *m = SetCurrentPollReply{} }
func (m *SetCurrentPollReply) String() string { return proto.CompactTextString(m) }
func (*SetCurrentPollReply) ProtoMessage()    {}
func (*SetCurrentPollReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{3}
}
func (m *SetCurrentPollReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetCurrentPollReply.Unmarshal(m, b)
}
func (m *SetCurrentPollReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetCurrentPollReply.Marshal(b, m, deterministic)
}
func (dst *SetCurrentPollReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCurrentPollReply.Merge(dst, src)
}
func (m *SetCurrentPollReply) XXX_Size() int {
	return xxx_messageInfo_SetCurrentPollReply.Size(m)
}
func (m *SetCurrentPollReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCurrentPollReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetCurrentPollReply proto.InternalMessageInfo

func (m *SetCurrentPollReply) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *SetCurrentPollReply) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

type OptionsRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PollId               string   `protobuf:"bytes,3,opt,name=pollId,proto3" json:"pollId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionsRequest) Reset()         { *m = OptionsRequest{} }
func (m *OptionsRequest) String() string { return proto.CompactTextString(m) }
func (*OptionsRequest) ProtoMessage()    {}
func (*OptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{4}
}
func (m *OptionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionsRequest.Unmarshal(m, b)
}
func (m *OptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionsRequest.Marshal(b, m, deterministic)
}
func (dst *OptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionsRequest.Merge(dst, src)
}
func (m *OptionsRequest) XXX_Size() int {
	return xxx_messageInfo_OptionsRequest.Size(m)
}
func (m *OptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OptionsRequest proto.InternalMessageInfo

func (m *OptionsRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *OptionsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *OptionsRequest) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

type OptionsReply struct {
	Options              []*Option `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OptionsReply) Reset()         { *m = OptionsReply{} }
func (m *OptionsReply) String() string { return proto.CompactTextString(m) }
func (*OptionsReply) ProtoMessage()    {}
func (*OptionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{5}
}
func (m *OptionsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionsReply.Unmarshal(m, b)
}
func (m *OptionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionsReply.Marshal(b, m, deterministic)
}
func (dst *OptionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionsReply.Merge(dst, src)
}
func (m *OptionsReply) XXX_Size() int {
	return xxx_messageInfo_OptionsReply.Size(m)
}
func (m *OptionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_OptionsReply proto.InternalMessageInfo

func (m *OptionsReply) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type Option struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserSessionId        string   `protobuf:"bytes,2,opt,name=userSessionId,proto3" json:"userSessionId,omitempty"`
	PollId               string   `protobuf:"bytes,3,opt,name=pollId,proto3" json:"pollId,omitempty"`
	UserId               string   `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	OptionId             string   `protobuf:"bytes,5,opt,name=optionId,proto3" json:"optionId,omitempty"`
	Content              string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{6}
}
func (m *Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Option.Unmarshal(m, b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Option.Marshal(b, m, deterministic)
}
func (dst *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(dst, src)
}
func (m *Option) XXX_Size() int {
	return xxx_messageInfo_Option.Size(m)
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Option) GetUserSessionId() string {
	if m != nil {
		return m.UserSessionId
	}
	return ""
}

func (m *Option) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

func (m *Option) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Option) GetOptionId() string {
	if m != nil {
		return m.OptionId
	}
	return ""
}

func (m *Option) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type BallotRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PollId               string   `protobuf:"bytes,3,opt,name=pollId,proto3" json:"pollId,omitempty"`
	Ids                  []int32  `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BallotRequest) Reset()         { *m = BallotRequest{} }
func (m *BallotRequest) String() string { return proto.CompactTextString(m) }
func (*BallotRequest) ProtoMessage()    {}
func (*BallotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{7}
}
func (m *BallotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BallotRequest.Unmarshal(m, b)
}
func (m *BallotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BallotRequest.Marshal(b, m, deterministic)
}
func (dst *BallotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BallotRequest.Merge(dst, src)
}
func (m *BallotRequest) XXX_Size() int {
	return xxx_messageInfo_BallotRequest.Size(m)
}
func (m *BallotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BallotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BallotRequest proto.InternalMessageInfo

func (m *BallotRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *BallotRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *BallotRequest) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

func (m *BallotRequest) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type BallotReply struct {
	PollId               string          `protobuf:"bytes,1,opt,name=pollId,proto3" json:"pollId,omitempty"`
	Options              []*BallotOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BallotReply) Reset()         { *m = BallotReply{} }
func (m *BallotReply) String() string { return proto.CompactTextString(m) }
func (*BallotReply) ProtoMessage()    {}
func (*BallotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{8}
}
func (m *BallotReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BallotReply.Unmarshal(m, b)
}
func (m *BallotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BallotReply.Marshal(b, m, deterministic)
}
func (dst *BallotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BallotReply.Merge(dst, src)
}
func (m *BallotReply) XXX_Size() int {
	return xxx_messageInfo_BallotReply.Size(m)
}
func (m *BallotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BallotReply.DiscardUnknown(m)
}

var xxx_messageInfo_BallotReply proto.InternalMessageInfo

func (m *BallotReply) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

func (m *BallotReply) GetOptions() []*BallotOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type BallotOption struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BallotOption) Reset()         { *m = BallotOption{} }
func (m *BallotOption) String() string { return proto.CompactTextString(m) }
func (*BallotOption) ProtoMessage()    {}
func (*BallotOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_759efac40a40c505, []int{9}
}
func (m *BallotOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BallotOption.Unmarshal(m, b)
}
func (m *BallotOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BallotOption.Marshal(b, m, deterministic)
}
func (dst *BallotOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BallotOption.Merge(dst, src)
}
func (m *BallotOption) XXX_Size() int {
	return xxx_messageInfo_BallotOption.Size(m)
}
func (m *BallotOption) XXX_DiscardUnknown() {
	xxx_messageInfo_BallotOption.DiscardUnknown(m)
}

var xxx_messageInfo_BallotOption proto.InternalMessageInfo

func (m *BallotOption) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BallotOption) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*CurrentPollRequest)(nil), "sessionpb.CurrentPollRequest")
	proto.RegisterType((*CurrentPollReply)(nil), "sessionpb.CurrentPollReply")
	proto.RegisterType((*SetCurrentPollRequest)(nil), "sessionpb.SetCurrentPollRequest")
	proto.RegisterType((*SetCurrentPollReply)(nil), "sessionpb.SetCurrentPollReply")
	proto.RegisterType((*OptionsRequest)(nil), "sessionpb.OptionsRequest")
	proto.RegisterType((*OptionsReply)(nil), "sessionpb.OptionsReply")
	proto.RegisterType((*Option)(nil), "sessionpb.Option")
	proto.RegisterType((*BallotRequest)(nil), "sessionpb.BallotRequest")
	proto.RegisterType((*BallotReply)(nil), "sessionpb.BallotReply")
	proto.RegisterType((*BallotOption)(nil), "sessionpb.BallotOption")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionClient interface {
	CurrentPoll(ctx context.Context, in *CurrentPollRequest, opts ...grpc.CallOption) (*CurrentPollReply, error)
	SetCurrentPoll(ctx context.Context, in *SetCurrentPollRequest, opts ...grpc.CallOption) (*SetCurrentPollReply, error)
	Options(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*OptionsReply, error)
	Ballot(ctx context.Context, in *BallotRequest, opts ...grpc.CallOption) (*BallotReply, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) CurrentPoll(ctx context.Context, in *CurrentPollRequest, opts ...grpc.CallOption) (*CurrentPollReply, error) {
	out := new(CurrentPollReply)
	err := c.cc.Invoke(ctx, "/sessionpb.Session/CurrentPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SetCurrentPoll(ctx context.Context, in *SetCurrentPollRequest, opts ...grpc.CallOption) (*SetCurrentPollReply, error) {
	out := new(SetCurrentPollReply)
	err := c.cc.Invoke(ctx, "/sessionpb.Session/SetCurrentPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Options(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*OptionsReply, error) {
	out := new(OptionsReply)
	err := c.cc.Invoke(ctx, "/sessionpb.Session/Options", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) Ballot(ctx context.Context, in *BallotRequest, opts ...grpc.CallOption) (*BallotReply, error) {
	out := new(BallotReply)
	err := c.cc.Invoke(ctx, "/sessionpb.Session/Ballot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
type SessionServer interface {
	CurrentPoll(context.Context, *CurrentPollRequest) (*CurrentPollReply, error)
	SetCurrentPoll(context.Context, *SetCurrentPollRequest) (*SetCurrentPollReply, error)
	Options(context.Context, *OptionsRequest) (*OptionsReply, error)
	Ballot(context.Context, *BallotRequest) (*BallotReply, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_CurrentPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CurrentPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionpb.Session/CurrentPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CurrentPoll(ctx, req.(*CurrentPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SetCurrentPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SetCurrentPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionpb.Session/SetCurrentPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SetCurrentPoll(ctx, req.(*SetCurrentPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionpb.Session/Options",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Options(ctx, req.(*OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_Ballot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Ballot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionpb.Session/Ballot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Ballot(ctx, req.(*BallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sessionpb.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentPoll",
			Handler:    _Session_CurrentPoll_Handler,
		},
		{
			MethodName: "SetCurrentPoll",
			Handler:    _Session_SetCurrentPoll_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Session_Options_Handler,
		},
		{
			MethodName: "Ballot",
			Handler:    _Session_Ballot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor_session_759efac40a40c505) }

var fileDescriptor_session_759efac40a40c505 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x7d, 0x49, 0xda, 0xa4, 0xbd, 0xfd, 0xa0, 0x6f, 0x1e, 0xaf, 0x9d, 0x97, 0x87, 0x12, 0x82,
	0x8b, 0x82, 0x50, 0xb4, 0x6e, 0x04, 0x05, 0x41, 0x41, 0x08, 0x5d, 0x28, 0xa9, 0x0b, 0x17, 0x6e,
	0xac, 0x99, 0x45, 0x60, 0xcc, 0xc4, 0xcc, 0x54, 0xe8, 0xff, 0x71, 0xe7, 0x9f, 0x94, 0x64, 0x92,
	0x74, 0xd2, 0x2f, 0x54, 0x70, 0xd7, 0x33, 0xe7, 0x9e, 0x73, 0xef, 0x9c, 0xde, 0x09, 0x74, 0x38,
	0xe1, 0x3c, 0x64, 0xd1, 0x28, 0x4e, 0x98, 0x60, 0xa8, 0x99, 0xc3, 0x78, 0xe6, 0x1e, 0x01, 0xba,
	0x9a, 0x27, 0x09, 0x89, 0xc4, 0x2d, 0xa3, 0xd4, 0x27, 0x2f, 0x73, 0xc2, 0x05, 0xb2, 0xa1, 0xc1,
	0x49, 0xf2, 0x4a, 0x12, 0x2f, 0xc0, 0x9a, 0xa3, 0x0d, 0x9b, 0x7e, 0x89, 0xdd, 0x6b, 0xe8, 0x55,
	0x14, 0x31, 0x5d, 0xec, 0xaa, 0x47, 0x7d, 0x30, 0x63, 0x46, 0xa9, 0x17, 0x60, 0x3d, 0x63, 0x72,
	0xe4, 0x4e, 0xe0, 0xef, 0x94, 0x88, 0xaf, 0x35, 0xdf, 0x6a, 0xe6, 0xc1, 0x9f, 0x55, 0xb3, 0xef,
	0xce, 0xf5, 0x00, 0xdd, 0x9b, 0x58, 0x84, 0x2c, 0xe2, 0x9f, 0x1c, 0x68, 0xce, 0x33, 0x26, 0x77,
	0x91, 0x48, 0x71, 0x37, 0x2a, 0xee, 0x67, 0xd0, 0x2e, 0xdd, 0xd3, 0x09, 0x0f, 0xc1, 0x62, 0x12,
	0x63, 0xcd, 0x31, 0x86, 0xad, 0xf1, 0xef, 0x51, 0xf9, 0xe7, 0x8c, 0x64, 0xa5, 0x5f, 0x54, 0xb8,
	0x6f, 0x1a, 0x98, 0xf2, 0x0c, 0x75, 0x41, 0x0f, 0x8b, 0x69, 0xf4, 0x30, 0x40, 0x07, 0xd0, 0x49,
	0x3b, 0x4f, 0xa5, 0xb6, 0x1c, 0xa7, 0x7a, 0xb8, 0x6d, 0x2a, 0xe5, 0x16, 0xb5, 0xca, 0x2d, 0x6c,
	0x68, 0xc8, 0xde, 0x5e, 0x80, 0xeb, 0xf2, 0xe6, 0x05, 0x46, 0x18, 0xac, 0x27, 0x16, 0x09, 0x12,
	0x09, 0x6c, 0x66, 0x54, 0x01, 0xdd, 0x67, 0xe8, 0x5c, 0x3e, 0x52, 0xca, 0xc4, 0x0f, 0x04, 0x88,
	0x7a, 0x60, 0x84, 0x01, 0xc7, 0x35, 0xc7, 0x18, 0xd6, 0xfd, 0xf4, 0xa7, 0x7b, 0x0f, 0xad, 0xa2,
	0x5d, 0x9a, 0xe8, 0x52, 0xa8, 0x55, 0x84, 0xc7, 0xcb, 0xa4, 0xf5, 0x2c, 0xe9, 0x81, 0x92, 0xb4,
	0x34, 0x58, 0xcd, 0xfb, 0x14, 0xda, 0x2a, 0xa1, 0x84, 0x5e, 0xcf, 0x42, 0x57, 0x22, 0xd0, 0x2b,
	0x11, 0x8c, 0xdf, 0x75, 0xb0, 0xf2, 0xd8, 0xd1, 0x04, 0x5a, 0xca, 0x62, 0xa2, 0x3d, 0xa5, 0xed,
	0xfa, 0xf6, 0xdb, 0xff, 0xb7, 0xd1, 0x31, 0x5d, 0xb8, 0xbf, 0xd0, 0x1d, 0x74, 0xab, 0x8b, 0x8e,
	0x1c, 0x45, 0xb0, 0xf1, 0x41, 0xd9, 0xfb, 0x3b, 0x2a, 0xa4, 0xeb, 0x05, 0x58, 0xf9, 0x56, 0xa2,
	0x7f, 0x6b, 0xfb, 0x57, 0xbc, 0x03, 0x7b, 0xb0, 0x89, 0x92, 0x06, 0xe7, 0x60, 0xca, 0xa4, 0x10,
	0x5e, 0x4b, 0xb5, 0x90, 0xf7, 0x37, 0x30, 0x99, 0x7a, 0x66, 0x66, 0x9f, 0xa5, 0x93, 0x8f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1c, 0x32, 0xfb, 0x85, 0xa7, 0x04, 0x00, 0x00,
}
